from django.shortcuts import render, redirect
from .models import Imagen
from django.core.paginator import Paginator
from datetime import timedelta
from collections import defaultdict
from django.core.cache import cache
from django.http import HttpResponse
import logging

logger = logging.getLogger(__name__)  # Para registrar errores

def Home(request):
    cache_key = "home_page_cache"  # Clave √∫nica para la cach√©
    cached_data = cache.get(cache_key)  # Intenta recuperar desde Redis

    if cached_data:
        logger.info("üìå Cache hit: datos obtenidos desde Redis")
        return render(request, 'Home.html', cached_data)  # Retorna datos cacheados

    logger.info("‚ùå Cache miss: consultando base de datos")

    # Consultamos las im√°genes desde la base de datos
    list_images = Imagen.objects.all().order_by('-fecha_subida')

    # Agrupar im√°genes por mes de subida
    grouped_images = dict(grouped_images)
    for imagen in list_images:
        fecha_mes = imagen.fecha_subida.strftime("%Y-%m")
        grouped_images[fecha_mes].append(imagen)

    grouped_images = [
        {'fecha_mes_perteneciente': key, 'imagenes': value}
        for key, value in grouped_images.items()
    ]

    # Configuramos paginaci√≥n (10 im√°genes por p√°gina)
    paginator = Paginator(list_images, 1)
    page_number = request.GET.get('page')
    products = paginator.get_page(page_number)

    # Contexto para la plantilla
    context = {'grouped_images': grouped_images, 'products': products}

    # Guardamos en cach√© con un tiempo de expiraci√≥n de 10 minutos
    cache.set(cache_key, context, timeout=60 * 5)  # Por ejemplo, 5 minutos


    return render(request, 'Home.html', context)





def Home_redirect(request):
    return redirect('Home')